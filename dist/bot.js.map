{"version":3,"file":"bot.js","sources":["../src/utils/arrays.ts","../src/commands/help.ts","../src/api/base.ts","../src/utils/escape.ts","../src/constants/regex.ts","../src/api/voice.ts","../src/api/text.ts","../src/api/status.ts","../src/utils/normalize.ts","../src/command.ts","../src/utils/random.ts","../src/utils/reactor.ts","../src/bot.ts","../src/index.ts"],"sourcesContent":["export class Arrays {\n  static unique<T>(list: T[]): T[] {\n    return [...new Set(list)];\n  }\n}\n","import pad from 'pad-left';\nimport { outdent } from 'outdent';\n\nimport { DiscordBot } from '../bot';\nimport { Arrays } from '../utils/arrays';\nimport { Command } from '../command';\n\n/**\n * Adds the help command.\n *\n * @param bot - the discord bot.\n */\nexport function help(bot: DiscordBot): void {\n  bot.command([\n    'help',\n    'help <command>',\n  ], async ({ message, args }) => {\n    if (Boolean(args.command)) {\n      const help = await bot.help(args.command as string);\n\n      if (!help) {\n        return await message.reply(outdent`\n          Unable to find a command with the given name. (${args.command})\n        `);\n      }\n\n      // Provide a more detailed help output.\n      const maxLength = Math.max(...Object.entries(help.args).map(([name, arg]) => arg.positional ? name.length : name.length + 2));\n\n      await message.reply(outdent`\n        Here's some information about that command!\n\n        **Usage:**  \\`${help.example}\\`\n\n        > ${help.description}\n\n        ${help.args ? outdent`\n          **Options**\n\n          \\`\\`\\`\n          ${Object.entries(help.args).map(([key, arg]) => {\n            const name = arg.positional ? key : `--${key}`;\n\n            return outdent`\n              ${pad(name, maxLength, ' ')} - ${arg.description}\n            `;\n          }).join('\\r\\n')}\n          \\`\\`\\`\n        ` : ''}\n      `);\n    } else {\n      const help = await bot.help();\n\n      const groups: {\n        [key: string]: Command.HelpInternal[];\n      } = {};\n\n      const names = Arrays.unique(help.map((h) => {\n        groups[h.group] = groups[h.group] || [];\n        groups[h.group].push(h);\n\n        return h.group;\n      }));\n\n      return await message.reply(outdent`\n        Here's a list of the available commands!\n\n        ${names.map((name) => outdent`\n          **${name}**\n\n            ${groups[name].map((help) => outdent`\n              \\`${help.example}\\` - ${help.description}\n            `).join('\\r\\n  ')}\n        `).join('\\r\\n\\r\\n')}\n      `);\n    }\n  }).help({\n    name: 'help',\n    description: 'Display a list of the available commands.',\n    args: {\n      command: 'The name of the command to display help information for.',\n    },\n  })\n}\n","// eslint-disable-next-line no-unused-vars\nimport { Client } from 'discord.js';\nimport EventEmitter from 'events';\n\nexport class ApiBase extends EventEmitter {\n  /**\n   * The Discord.JS client.\n   */\n  protected _client: Client;\n\n  constructor(client: Client) {\n    super();\n\n    this._client = client;\n  }\n}\n","export class Escape {\n  /**\n   * Escapes any regular expression values from a given string.\n   *\n   * @param value - the regular expression string to escape.\n   * @returns the escaped regular expression\n   */\n  static regex(value: string): string {\n    return value.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n  }\n}\n","import { Escape } from '../utils/escape';\n\nexport function URL(domain: string): RegExp {\n  return new RegExp(`^(?:https?://)?(?:www\\\\.)?${Escape.regex(domain)}`, 'i');\n}\n\nexport const YOUTUBE = URL('youtube.com');\n","import path from 'path';\nimport fs from 'fs';\nimport { VoiceChannel, VoiceConnection, Collection, GuildMember, Client } from 'discord.js';\nimport ytdl from 'ytdl-core-discord';\n\nimport { ApiBase } from './base';\n\nimport { YOUTUBE } from '../constants/regex';\n\nconst TYPES: {\n  ogg: 'ogg/opus';\n  webm: 'webm/opus';\n} = {\n  'webm': 'webm/opus',\n  'ogg': 'ogg/opus',\n};\n\nexport class Voice extends ApiBase {\n  private channel: (null|VoiceChannel);\n  private connection: (null|VoiceConnection);\n\n  constructor(client: Client) {\n    super(client);\n\n    this.channel = null;\n    this.connection = null;\n\n    this._client.on('voiceStateUpdate', (previously, currently) => {\n      if (!this.channel) return;\n\n      if (previously.channelID === this.channel.id) {\n        this.emit('member:leave');\n      } else if (currently.channelID) {\n        this.emit('member:join');\n      }\n    });\n  }\n\n  /**\n   * Joins a voice channel with the given id.\n   *\n   * @param channelID - the id of the voice channel to join.\n   */\n  async join(channelID: string): Promise<void> {\n    if (this.channel && this.channel.id === channelID) return;\n\n    const channel = await this._client.channels.fetch(channelID) as VoiceChannel;\n\n    if (channel.type !== 'voice') {\n      throw new Error(`Expected the given channel to be a voice channel. (${channel.name})`);\n    }\n\n    const connection = await channel.join();\n\n    this.channel = channel;\n    this.connection = connection;\n  }\n\n  /**\n   * Leaves the voice channel if we're inside of one.\n   */\n  async leave(): Promise<void> {\n    if (this.connection) {\n      if (this.connection.dispatcher) {\n        this.connection.dispatcher.destroy();\n      }\n\n      this.connection.disconnect();\n      this.connection = null;\n    }\n\n    if (this.channel) {\n      this.channel.leave();\n      this.channel = null;\n    }\n\n    this.emit('leave');\n  }\n\n  /**\n   * Plays an Audio File / YouTube Video in the current channel.\n   *\n   * @param uri - the path of the file or url of the YouTube Video to play.\n   * @returns a promise that resolves when the audio starts playing.\n   */\n  async play(uri: string): Promise<void> {\n    if (!this.isConnected) {\n      throw new Error('Must be in a channel to play audio.');\n    }\n\n    const connection = this.connection as VoiceConnection;\n\n    if (uri.match(YOUTUBE)) {\n      connection.play(await ytdl(uri, {\n        highWaterMark: 1<<25,\n      }), { type: 'opus' });\n    } else {\n      const extension = path.extname(uri).replace(/^\\./, '');\n\n      if (extension === 'webm' || extension === 'ogg') {\n        const TYPE = TYPES[extension];\n\n        connection.play(fs.createReadStream(uri), {\n          volume: false,\n          type: TYPE,\n        });\n      } else {\n        connection.play(uri, {\n          volume: false,\n        });\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      connection.dispatcher\n        .once('finish', () => {\n          this.emit('finish', {\n            uri,\n            interrupted: false,\n            canceled: false,\n          });\n        })\n        .once('close', () => {\n          this.emit('finish', {\n            uri,\n            interrupted: this.isPlaying,\n            canceled: true,\n          });\n        })\n        .once('error', (error) => reject(error))\n        .once('start', () => {\n          this.emit('start', { uri });\n          resolve();\n        });\n    });\n  }\n\n  /**\n   * Stops playing the current audio.\n   */\n  stop(): void {\n    if (!this.isConnected) {\n      throw new Error('Must be in a channel to stop audio.');\n    }\n\n    if (!this.isPlaying) {\n      throw new Error('Must be playing audio to stop audio.');\n    }\n\n    const connection = this.connection as VoiceConnection;\n\n    connection.dispatcher.destroy();\n  }\n\n  /**\n   * Pauses the audio if we're playing any.\n   */\n  pause(): void {\n    if (this.isPlaying) {\n      const connection = this.connection as VoiceConnection;\n\n      connection.dispatcher.pause();\n    }\n  }\n\n  /**\n   * Resumes the audio if we're playing any.\n   */\n  resume(): void {\n    if (this.isPlaying) {\n      const connection = this.connection as VoiceConnection;\n\n      connection.dispatcher.resume();\n    }\n  }\n\n  /**\n   * Returns the amount of time the given audio has been playing (in ms).\n   */\n  get elapsed(): (null|number) {\n    if (this.isPlaying) {\n      const connection = this.connection as VoiceConnection;\n\n      return connection.dispatcher.streamTime;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns the name of the current channel.\n   */\n  get channelName(): (null|string) {\n    if (this.isConnected) {\n      const channel = this.channel as VoiceChannel;\n\n      return channel.name;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns the current members in the given channel.\n   */\n  get members(): (null|Collection<string, GuildMember>) {\n    if (this.isConnected) {\n      const channel = this.channel as VoiceChannel;\n\n      return channel.members;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns true if the bot is actively connected to a voice channel.\n   */\n  get isConnected(): boolean {\n    return this.channel !== null && this.connection !== null;\n  }\n\n  /**\n   * Returns true if the bot is actively playing audio.\n   */\n  get isPlaying(): boolean {\n    if (this.isConnected) {\n      const connection = this.connection as VoiceConnection;\n\n      return Boolean(connection.dispatcher);\n    }\n\n    return false;\n  }\n}\n\nexport interface Voice {\n  /**\n   * Fired when a user joins the channel.\n   */\n  on(name: 'member:join', listener: () => void): this;\n\n  /**\n   * Fired when a user leaves the channel.\n   */\n  on(name: 'member:leave', listener: () => void): this;\n\n  /**\n   * Fired when the bot leaves the channel.\n   */\n  on(name: 'leave', listener: () => void): this;\n\n  /**\n   * Fired when the bot starts playing audio.\n   */\n  on(name: 'start', listener: (event: Voice.AudioEvent) => void): this;\n\n  /**\n   * Fired when the bot finishes playing audio.\n   */\n  on(name: 'finish', listener: (event: Voice.AudioFinishedEvent) => void): this;\n\n  emit(name: 'member:join'): boolean;\n  emit(name: 'member:leave'): boolean;\n  emit(name: 'leave'): boolean;\n  emit(name: 'start', event: Voice.AudioEvent): boolean;\n  emit(name: 'finish', event: Voice.AudioFinishedEvent): boolean;\n}\n\nexport declare namespace Voice {\n  export interface AudioEvent {\n    /**\n     * The uri of the audio.\n     */\n    uri: string;\n  }\n\n  export interface AudioFinishedEvent extends AudioEvent {\n    /**\n     * Whether another audio stream was played in place of this audio.\n     */\n    interrupted: boolean;\n\n    /**\n     * Whether the audio was stopped.\n     */\n    canceled: boolean;\n  }\n}\n","import { TextChannel, MessageOptions, MessageEmbed } from 'discord.js';\n\nimport { ApiBase } from './base';\n\nexport class Text extends ApiBase {\n  /**\n   * Sends a message to the text channel with the given id.\n   *\n   * @param channelID - the id of the text channel to message.\n   * @param message - the message to send to the channel.\n   */\n  async send(channelID: string, message: (string|MessageOptions|MessageEmbed)): Promise<void> {\n    const channel = await this.channel(channelID);\n\n    await channel.send(message);\n  }\n\n  /**\n   * Finds a text channel with the given id.\n   *\n   * @param channelID - the id of the text channel to retrieve.\n   * @returns the related text channel.\n   */\n  async channel(channelID: string): Promise<TextChannel> {\n    const channel = await this._client.channels.fetch(channelID) as TextChannel;\n\n    if (channel.type !== 'text') {\n      throw new Error(`Expected the given channel to be a text channel. (${channel.name})`);\n    }\n\n    return channel;\n  }\n}\n","import { ApiBase } from './base';\n\nexport class Status extends ApiBase {\n  /**\n   * Updates the bots status message.\n   *\n   * @param message - the new status message.\n   */\n  async set(message: string): Promise<void> {\n    if (this._client.user === null) return;\n\n    await this._client.user.setActivity(message, {\n      type: 'PLAYING',\n    });\n  }\n\n  /**\n   * Sets the bot to be offline / invisible.\n   */\n  async offline(): Promise<void> {\n    if (this._client.user === null) return;\n\n    await this._client.user.setStatus('invisible');\n  }\n}\n","import { Command } from '../command';\n\nexport class Normalize {\n  /**\n   * Normalizes the pattern formats into a common format.\n   *\n   * @param formats - the formats to normalize.\n   * @returns a collection of normalized patterns.\n   */\n  static patterns(formats: (Normalize.Formats|Normalize.Formats[])): Command.Pattern[] {\n    if (Array.isArray(formats)) {\n      return formats.map((format) => Normalize.pattern(format));\n    }\n\n    return [Normalize.pattern(formats)];\n  }\n\n  /**\n   * Normalizes the pattern format into a common pattern.\n   *\n   * @param format - the format to normalize.\n   * @returns a collection of normalized patterns.\n   */\n  static pattern(format: Normalize.Formats): Command.Pattern {\n    if (typeof(format) === 'string') {\n      const names: Command.Name[] = [];\n\n      const regex = new RegExp(`^${format.replace(/<([^<>]+)>/g, (_, name) => {\n        const rest = name.startsWith('...');\n        names.push({\n          name: rest ? name.replace(/^[.]{3}/, '') : name,\n          rest,\n        });\n\n        return rest ? '(.+)' : '([^\\\\s]+)';\n      })}`, 'i');\n\n      return {\n        names,\n        regex,\n        original: format,\n      };\n    }\n\n    return format;\n  }\n\n  static help(options: Command.Help, patterns: Command.Pattern[]): Command.HelpInternal {\n    return {\n      name: options.name,\n      description: options.description,\n      group: options.group || 'General',\n      args: Object.entries(options.args || {}).reduce((output, [key, value]) => ({\n        ...output,\n        [key]: {\n          name: key,\n          ...(typeof(value) === 'object' ? {\n            description: value.description,\n            type: value.type || 'string',\n          } : {\n            description: value,\n            type: 'string',\n          }),\n          positional: Boolean(patterns.find((pattern) => pattern.names.some(({ name }) => key === name))),\n        },\n      }), {} as {\n        [key: string]: Command.HelpArgumentInternal;\n      }),\n    };\n  }\n}\n\nexport declare namespace Normalize {\n  export type Formats = (string|Command.Pattern);\n}\n","import parser, { Options as YargsOptions } from 'yargs-parser';\nimport { Message } from 'discord.js';\n\nimport { Normalize } from './utils/normalize';\n\nexport const TYPES = {\n  boolean: Boolean,\n  number: Number,\n  string: String,\n};\n\nexport class Command {\n  private config: Command.ConfigInternal;\n  private helpConfig?: Command.HelpInternal;\n  private yargs?: YargsOptions;\n\n  constructor(config: Command.Config) {\n    this.config = {\n      ...config,\n      patterns: Normalize.patterns(config.patterns),\n    };\n  }\n\n  /**\n   * Checks if the message matches the commands pattern.\n   *\n   * @param content - the message to test.\n   * @returns the matching pattern.\n   */\n  public match(content: string): (null|Command.Pattern) {\n    return this.config.patterns\n      .filter(({ regex }) => content.match(regex))\n      .reduce((closestPattern: (null|Command.Pattern), pattern: Command.Pattern): Command.Pattern => {\n        if (!closestPattern || pattern.regex.toString().length > closestPattern.regex.toString().length) {\n          return pattern;\n        }\n\n        return closestPattern;\n      }, null);\n  }\n\n  private coerce(type: Command.ArgumentTypeKeys, value: string) {\n    const Type = TYPES[type];\n\n    if (!Type) {\n      throw new Error(`Unable to coerce the given type. (${type})`);\n    }\n\n    return value ? Type(value) : value;\n  }\n\n  /**\n   * Parses the message and extracts the arguments.\n   *\n   * @param content - the message to parse.\n   */\n  parse(content: string): { [key: string]: any } {\n    const pattern = this.match(content);\n\n    if (!pattern) {\n      throw new Error(`Given message isn't intended for this command. (${content})`);\n    }\n\n    const args = parser(content, {\n      ...this.yargs,\n      configuration: {\n        'unknown-options-as-args': true,\n      },\n    });\n\n    const unknowns = args._.filter((arg) => arg.startsWith('-'));\n\n    if (unknowns.length > 0) {\n      throw new Error(`Unknown arguments. ('${unknowns.join(`','`)}')`);\n    }\n\n    const [, ...groups] = args._;\n\n    if (this.helpConfig) {\n      return Object.entries(this.helpConfig.args).reduce((output, [name, arg]) => {\n        const positionalIndex = pattern.names.findIndex(({ name: patternName }) => name === patternName);\n\n        let value;\n        if (positionalIndex === -1) {\n          value = args[name];\n        } else if (pattern.names[positionalIndex].rest) {\n          value = groups.slice(positionalIndex).join(' ');\n        } else {\n          value = groups[positionalIndex];\n        }\n\n        output[name] = this.coerce(arg.type, value || arg.default || null);\n        return output;\n      }, {} as {\n        [key: string]: any;\n      });\n    }\n\n    return {};\n  }\n\n  /**\n   * Executes the command.\n   *\n   * @param info - the command information.\n   * @returns the promise resolved by the listener.\n   */\n  public async exec(info: Command.ListenerInfo): Promise<void> {\n    await this.config.listener(info);\n  }\n\n  /**\n   * @param options - the help options for the given command.\n   *\n   * @returns the help options.\n   */\n  public help(options?: Command.Help): (null|Command.HelpInternal) {\n    if (options !== undefined) {\n      this.helpConfig = Normalize.help(options, this.config.patterns);\n\n      this.yargs = Object.entries(this.helpConfig.args).reduce((output, [name, arg]) => {\n        if (!arg.positional) {\n          output[arg.type].push(name);\n\n          if (arg.default) {\n            output.default[name] = arg.default;\n          }\n        }\n\n        return output;\n      }, {\n        array: [] as string[],\n        boolean: [] as string[],\n        number: [] as string[],\n        string: [] as string[],\n        default: {} as { [key: string]: any; },\n      });\n    }\n\n    const [firstPattern] = this.config.patterns;\n\n    if (this.helpConfig) {\n      return {\n        ...this.helpConfig,\n        example: `.${firstPattern.original}`,\n      };\n    }\n\n    return null;\n  }\n}\n\nexport declare namespace Command {\n  export type ArgumentTypeKeys = ('boolean'|'string'|'number');\n\n  export interface Arguments {\n    [key: string]: any;\n  }\n\n  export interface ListenerInfo {\n    /**\n     * The message information from discord.\n     */\n    message: Message;\n\n    /**\n     * The arguments provided in the command.\n     */\n    args: Arguments;\n  }\n\n  export type Listener = (info: ListenerInfo) => void;\n\n  type InputPattern = (string|Pattern);\n  export type InputPatterns = (InputPattern|InputPattern[]);\n\n  export interface Config {\n    /**\n     * The pattern(s) to listen for.\n     */\n    patterns: InputPatterns;\n\n    /**\n     * The listener to invoke when the pattern is matched.\n     */\n    listener: Listener;\n  }\n\n  export interface ConfigInternal extends Config {\n    patterns: Pattern[];\n  }\n\n  export interface HelpArgument {\n    /**\n     * The argument type.\n     */\n    type: ArgumentTypeKeys;\n\n    /**\n     * The default value.\n     */\n    default?: any;\n\n    /**\n     * A description of what this argument does.\n     */\n    description?: string;\n  }\n\n  export interface HelpArgumentInternal extends HelpArgument {\n    /**\n     * The name of the argument.\n     */\n    name: string;\n\n    /**\n     * Whether this argument is positional.\n     */\n    positional: boolean;\n  }\n\n  export interface Help {\n    /**\n     * The name of the command.\n     */\n    name: string;\n\n    /**\n     * The group the command belongs to.\n     *\n     * @defaultValue 'General'\n     */\n    group?: string;\n\n    /**\n     * The commands description.\n     */\n    description: string;\n\n    /**\n     * A map describing each of the arguments.\n     */\n    args?: {\n      [key: string]: (string|Partial<HelpArgument>);\n    };\n  }\n\n  export interface HelpInternal extends Help {\n    group: string;\n\n    args: {\n      [key: string]: HelpArgumentInternal;\n    };\n\n    /**\n     * An example of how the command is used.\n     */\n    example?: string;\n  }\n\n  export interface Name {\n    /**\n     * The name of the parameter.\n     */\n    name: string;\n\n    /**\n     * Whether this parameter should include the remaining positional arguments.\n     */\n    rest: boolean;\n  }\n\n  export interface Pattern {\n    /**\n     * The list of positional argument names.\n     */\n    names: Name[];\n\n    /**\n     * The pattern's regular expression.\n     */\n    regex: RegExp;\n\n    /**\n     * The original pattern string\n     */\n    original: string;\n  }\n}\n","class Random {\n  /**\n   * Generates a random number between the max and min.\n   *\n   * @param min - the minimum possible number.\n   * @param max - the maximum possible number.\n   * @returns a random number.\n   */\n  integer(min: number, max: number): number {\n    return Math.round(Math.random() * (max - min) + min);\n  }\n\n  /**\n   * Randomly picks an item from the list.\n   *\n   * @param list - the list to pick an item from.\n   * @returns a random item from the list.\n   */\n  pickone<T>(list: T[]): T {\n    return list[this.integer(0, list.length - 1)];\n  }\n}\n\nexport const random = new Random();\n","import { Message, MessageReaction } from 'discord.js';\nimport { random } from './random';\n\nexport class Reactor {\n  private reactions = {\n    success: ['👍'],\n    failure: ['⛔'],\n    awaiting: ['a:loading:718307876724015105'],\n  };\n\n  /**\n   * Sets the success reactions.\n   *\n   * @param reactions - the reactions to add.\n   */\n  setSuccessReactions(...reactions: string[]): void {\n    this.reactions.success = reactions;\n  }\n\n  /**\n   * Sets the failure reactions.\n   *\n   * @param reactions - the reactions to add.\n   */\n  setFailureReactions(...reactions: string[]): void {\n    this.reactions.failure = reactions;\n  }\n\n  /**\n   * Sets the awaiting reactions.\n   *\n   * @param reactions - the reactions to add.\n   */\n  setAwaitingReactions(...reactions: string[]): void {\n    this.reactions.awaiting = reactions;\n  }\n\n  /**\n   * Automatically adds emoji to indicate the state of a request.\n   *\n   * @param message - the message to react to.\n   * @param promise - the promise to wait for.\n   * @returns the resolved promise.\n   */\n  async loading<T>(message: Message, promise: Promise<T>): Promise<T> {\n    const reactionPromise = this.awaiting(message);\n\n    try {\n      const [response] = await Promise.all([\n        promise,\n        reactionPromise,\n      ]);\n\n      await this.success(message);\n\n      return response;\n    } catch (error) {\n      await this.failure(message);\n\n      throw error;\n    } finally {\n      const reaction = await reactionPromise;\n\n      await Promise.all(\n        Array.from(reaction.users.cache.values())\n          .filter((user) => user.bot)\n          .map(({ id }) => reaction.users.remove(id)),\n      );\n    }\n  }\n\n  /**\n   * Indicates to the user that the command failed for some reason.\n   *\n   * @param message - the message to react to.\n   * @returns the reaction\n   */\n  failure(message: Message): Promise<MessageReaction> {\n    return message.react(random.pickone(this.reactions.failure));\n  }\n\n  /**\n   * Indicates to the user that the command was executed successfully.\n   *\n   * @param message - the message to react to.\n   * @returns the reaction\n   */\n  success(message: Message): Promise<MessageReaction> {\n    return message.react(random.pickone(this.reactions.success));\n  }\n\n  /**\n   * Indicates to the user that the command is in progress.\n   *\n   * @param message - the message to react to.\n   * @returns the reaction\n   */\n  awaiting(message: Message): Promise<MessageReaction> {\n    return message.react(random.pickone(this.reactions.awaiting));\n  }\n}\n\nexport const reactor = new Reactor();\n","import EventEmitter from 'events';\nimport { Client, Message } from 'discord.js';\n\nimport { Voice } from './api/voice';\nimport { Text } from './api/text';\nimport { Status } from './api/status';\nimport { Command } from './command';\nimport { reactor } from './utils/reactor';\n\nexport class DiscordBot extends EventEmitter {\n  private config: DiscordBot.ConfigInternal;\n  private client: Client;\n  private commands: Command[] = [];\n  /**\n   * Methods to interact with voice channels.\n   */\n  voice: Voice;\n  /**\n   * Methods to interact with text channels.\n   */\n  text: Text;\n  /**\n   * Methods to interact with the bots status.\n   */\n  status: Status;\n\n  constructor(config: DiscordBot.Config) {\n    super();\n\n    this.onMessage = this.onMessage.bind(this);\n\n    this.config = {\n      prefix: '.',\n      ...config,\n    };\n\n\n    this.client = new Client();\n    this.client.on('message', this.onMessage);\n\n    this.voice = new Voice(this.client);\n    this.text = new Text(this.client);\n    this.status = new Status(this.client);\n  }\n\n  /**\n   * The ID of the bot user.\n   */\n  get id(): (string|null) {\n    return this.client.user && this.client.user.id;\n  }\n\n  /**\n   * The name of the bot user.\n   */\n  get name(): (string|null) {\n    return this.client.user && this.client.user.username;\n  }\n\n  /**\n   * The avatar of the bot user.\n   */\n  get avatar(): (string|null) {\n    return this.client.user && this.client.user.avatarURL();\n  }\n\n  login(): Promise<string> {\n    return this.client.login(this.config.token);\n  }\n\n  /**\n   * Adds a command to the bot.\n   *\n   * @param patterns - the pattern to listen for.\n   * @param listener - the listener to invoke when the pattern is matched.\n   * @returns the new command.\n   */\n  command(patterns: Command.InputPatterns, listener: Command.Listener): Command {\n    const command = new Command({\n      patterns,\n      listener,\n    });\n\n    this.commands.push(command);\n\n    return command;\n  }\n\n  private async onMessage(message: Message): Promise<void> {\n    let args;\n\n    try {\n      let { content } = message;\n\n      if (!content.startsWith(this.config.prefix)) return;\n\n      content = content.replace(new RegExp(`^${this.config.prefix}`), '');\n\n      const command = this.commands.find((command) => command.match(content));\n\n      if (!command) return;\n\n      // TODO: This should be multi-threaded.\n      args = command.parse(content);\n\n      const info = {\n        message,\n        args,\n      };\n\n      this.emit('command:before', info);\n      await reactor.loading(info.message, command.exec(info));\n      this.emit('command:after', info);\n    } catch (error) {\n      if (this.listenerCount('error') > 0) {\n        this.emit('error', {\n          message,\n          args,\n          error,\n        });\n      } else {\n        console.error(error);\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Returns the help information for a given command or all commands.\n   *\n   * @param name - the name of the command to retrieve help information for.\n   * @returns the help information.\n   */\n  help(): Command.HelpInternal[];\n  help(name: string): (null|Command.HelpInternal);\n  help(name?: string): (null|Command.HelpInternal|Command.HelpInternal[]) {\n    if (name) {\n      const command = this.commands.find((command) => {\n        const help = command.help();\n\n        return help && help.name === name;\n      });\n\n      return command ? command.help() : null;\n    }\n\n    return this.commands.map((command) => command.help()).filter(Boolean) as Command.HelpInternal[];\n  }\n}\n\nexport interface DiscordBot {\n  on(name: 'command:before', listener: DiscordBot.CommandEventListener): this;\n  on(name: 'command:after', listener: DiscordBot.CommandEventListener): this;\n  on(name: 'error', listener: DiscordBot.EventErrorListener): this;\n}\n\nexport declare namespace DiscordBot {\n  export interface CommandEvent {\n    /**\n     * The Discord.JS Message.\n     */\n    message: Message;\n\n    /**\n     * The arguments passed.\n     */\n    args: {\n      [key: string]: any;\n    };\n  }\n\n  export interface CommandErrorEvent extends CommandEvent {\n    /**\n     * The error.\n     */\n    error: any;\n  }\n\n\n  export type CommandEventListener = (event: CommandEvent) => void;\n  export type EventErrorListener = (event: CommandErrorEvent) => void;\n\n  export interface Config {\n    /**\n     * The command prefix.\n     *\n     * @defaultValue '.'\n     */\n    prefix?: string;\n\n    /**\n     * The Discord Auth token.\n     */\n    token: string;\n  }\n\n  export interface ConfigInternal extends Config {\n    prefix: string;\n  }\n}\n","import { help } from './commands/help';\nexport { DiscordBot } from './bot';\nexport { reactor } from './utils/reactor';\n\nexport const CommonCommands = {\n  help,\n};\n"],"names":["Arrays","unique","list","Set","help","bot","command","message","args","Boolean","maxLength","Math","max","Object","entries","map","name","arg","positional","length","reply","outdent","example","description","key","pad","join","groups","names","h","group","push","ApiBase","EventEmitter","constructor","client","_client","Escape","regex","value","replace","URL","domain","RegExp","YOUTUBE","TYPES","Voice","channel","connection","on","previously","currently","channelID","id","emit","channels","fetch","type","Error","leave","dispatcher","destroy","disconnect","play","uri","Promise","resolve","reject","once","interrupted","canceled","isPlaying","error","isConnected","match","ytdl","highWaterMark","extension","path","extname","TYPE","fs","createReadStream","volume","stop","pause","resume","elapsed","streamTime","channelName","members","Text","send","Status","set","user","setActivity","offline","setStatus","Normalize","patterns","formats","Array","isArray","format","pattern","_","rest","startsWith","original","options","reduce","output","find","some","boolean","number","Number","string","String","Command","config","content","filter","closestPattern","toString","coerce","Type","parse","parser","yargs","configuration","unknowns","helpConfig","positionalIndex","findIndex","patternName","slice","default","exec","info","listener","undefined","array","firstPattern","Random","integer","min","round","random","pickone","Reactor","success","failure","awaiting","setSuccessReactions","reactions","setFailureReactions","setAwaitingReactions","loading","promise","reactionPromise","all","response","reaction","from","users","cache","values","remove","react","reactor","DiscordBot","onMessage","bind","prefix","Client","voice","text","status","username","avatar","avatarURL","login","token","commands","listenerCount","console","CommonCommands"],"mappings":"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"}